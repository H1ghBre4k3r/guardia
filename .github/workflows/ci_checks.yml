name: CI Checks

permissions:
  contents: read
  packages: write

on:
  push:

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 1

jobs:
  building:
    name: Building
    continue-on-error: ${{ matrix.experimental || false }}
    strategy:
      matrix:
        include:
          # Debug builds on all platforms (compatibility check)
          - os: ubuntu-latest
            rust: stable
            profile: dev
          - os: macOS-latest
            rust: stable
            profile: dev
          - os: windows-latest
            rust: stable
            profile: dev
          # Release build only on Linux (used by Docker, fastest runner)
          - os: ubuntu-latest
            rust: stable
            profile: release
          # Nightly build on Linux only (allowed to fail)
          - os: ubuntu-latest
            rust: nightly
            profile: dev
            experimental: true
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: ${{ matrix.os }}-${{ matrix.rust }}-${{ matrix.profile }}
          cache-on-failure: true

      - name: Build ${{ matrix.profile }}
        run: |
          if [ "${{ matrix.profile }}" = "release" ]; then
            cargo build --all --release
          else
            cargo build --all
          fi
        shell: bash
        env:
          RUST_BACKTRACE: 1
  testing:
    name: Testing
    strategy:
      matrix:
        os:
          # Check tests pass on common OSes
          - ubuntu-latest
          - macOS-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v5

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: ${{ matrix.os }}-stable-test
          cache-on-failure: true

      - name: Install cargo-nextest
        uses: taiki-e/install-action@nextest

      - name: Run tests with nextest
        run: cargo nextest run --workspace --all-features
        env:
          RUST_BACKTRACE: 1

      - name: Run doctests (not supported by nextest)
        run: cargo test --workspace --doc
        env:
          RUST_BACKTRACE: 1
  linting:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: true

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: ubuntu-latest-stable-clippy
          cache-on-failure: true

      - name: Run clippy
        run: cargo clippy --all-targets --workspace --all-features
  formatting:
    name: Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: true

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Check formatting
        run: cargo fmt --all -- --check

  docker:
    name: Docker Build & Publish
    needs: [building, testing, linting, formatting]
    uses: ./.github/workflows/docker-publish.yml
    secrets: inherit
